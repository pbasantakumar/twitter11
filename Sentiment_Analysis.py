# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jb0CbYxKfx-QAXq4GF_8mDAZaYTPCD38
"""

import tweepy
from textblob import TextBlob
from wordcloud import WordCloud
import pandas as pd
import numpy as np
import re
import matplotlib.pyplot as plt


plt.style.use('fivethirtyeight')

# from google.colab import files
# uploaded = files.upload()
# coonect as OATH jump server
consumer_key = "UgSlsnLVlvWsAZjebUdzwXlT6"
consumer_sec = "isJC9mfe85shl0Pch6uofjDgGfPeQdTPN8c4KNCWrC0RwNH7jt"

# from proxy server we need to connect
access_token = "470819711-Yo7Nw3Rebmv1MB6n5qMdRTpqPqlz0KCsYVDbZkcQ"
access_token_sec = "m1dBkLTfnNXeNF6onBXhItUep8BIQjxl5Be2OkaEv2Sdu"
# connect to jump server of twitter
auth = tweepy.OAuthHandler(consumer_key, consumer_sec)

# now we can connect from jump server to webserver of twitter
auth.set_access_token(access_token, access_token_sec)

# now we can connect to API strong server of twitter
api_connect = tweepy.API(auth)

posts = api_connect.user_timeline(screen_name="IKEY", count=100, tweet_mode="extended")
print("show the recent 5 tweets: \n")
i = 1
for tweet in posts[0:20]:
    print(str(i) + ') ' + str(tweet.id)+' ' + str(tweet.created_at) + str(tweet.full_text) + '\n')
    i = i + 1

    # Create a dataframe with a column called Tweets
    df = pd.DataFrame([tweet.id for tweet in posts], columns=['id'])
    df = pd.DataFrame([tweet.id for tweet in posts], columns=['created_at'])
    df = pd.DataFrame([tweet.full_text for tweet in posts], columns=['Tweets'])
    df.head()

# Clean the text function
def cleanTxt(text):
        #print("Inside cleantext: \n")
        text = re.sub(r'@[A-Za-z0-9]+', '', text)  # Remove @mentioned
        text = re.sub(r'#', '', text)  # Remove the # symbol
        text = re.sub(r'_', '', text)  # Remove the _ symbol
        text = re.sub(r':', '', text)  # Remove the : symbol
        text = re.sub(r'RT[\s]+', '', text)  # Remove RT
        text = re.sub(r'https?:\/\/\s+', '', text)  # Removing hyperlink
        return text


    #cleaning the text
df['Tweets'] = df['Tweets'].apply(cleanTxt)

    # show the clean text
df

#Create a function to get the subjectivity
def getSubjectivity(text):
  return TextBlob(text).sentiment.subjectivity
  print("Inside cleantext1: \n")

#Create a function to get the polarity
def getPolarity(text):
  return TextBlob(text).sentiment.polarity
print("Inside cleantext1: \n")

#Create two new columns
df['Subjectivity'] = df['Tweets'].apply(getSubjectivity)
df['Polarity'] =df['Tweets'].apply(getPolarity)
df

# Plot The Word Cloud
allWords = ' '.join([twts for twts in df['Tweets']])
wordCloud = WordCloud(width = 500, height= 300, random_state = 21, max_font_size = 119).generate(allWords)
plt.imshow(wordCloud,interpolation = "bilinear")
plt.axis('off')
plt.show()

#Create a function to compute the negative , neutral and positive analysis
def getAnalysis(score):
  if score < 0:
    return 'Negative'
  elif score == 0:
      return 'Neutral'
  else:
      return 'Positive'

df['Analysis']= df['Polarity'].apply(getAnalysis)
df

#Print all of the positive tweets
j=1
sortedDF = df.sort_values(by=['Polarity'])
for i in range(0, sortedDF.shape[0]):
  if (sortedDF['Analysis'][i] == 'Positive'):
    print(str(j)+')'+sortedDF['Tweets'][i])
    print()
  j=j+1

#Print all of the Negative tweets
j=1
sortedDF = df.sort_values(by=['Polarity'],ascending = 'False')
for i in range(0, sortedDF.shape[0]):
  if (sortedDF['Analysis'][i] == 'Negative'):
    print(str(j)+')'+sortedDF['Tweets'][i])
    print()
  j=j+1

#plot the polarity and sujectvity
plt.figure(figsize=(8,6))
for i in range(0, df.shape[0]):
  plt.scatter(df['Polarity'][i],df['Subjectivity'][i],color='Blue')
  plt.title('Sentiment Analysis')
  plt.xlabel('Polarity')
  plt.ylabel('Suubjectivity')
  plt.show

#Get the Percentage of positive Tweets
ptweets = df[df.Analysis== 'Positive']
ptweets = ptweets['Tweets']
round( (ptweets.shape[0] / df.shape[0])*100,1)

#Get the percentage of Negative Tweets
ntweets = df[df.Analysis =='Negative']
ntweets = ntweets['Tweets']
round( (ntweets.shape[0] / df.shape[0])*100,1)

#Show the value counts
df['Analysis'].value_counts()
#plot and cisualize the counts
plt.title('Sentiment Analysis')
plt.xlabel('Sentiment')
plt.ylabel('Counts')
df['Analysis'].value_counts().plot(kind='bar')